Black listed name "%s" blacklisted-name C0102 Used when the name is listed in the black list (unauthorized names).Invalid %s name "%s"%s invalid-name C0103 Used when the name doesn't match the regular expression associated to its type
  (constant, variable, class...).Missing %s docstring missing-docstring C0111 Used when a module, function, class or method has no docstring.Some special
  methods like __init__ doesn't necessary require a docstring.Empty %s docstring empty-docstring C0112 Used when a module, function, class or method has an empty docstring (it would
  be too easy ;).Consider changing "%s" to "%s" unneeded-not C0113 Used when a boolean expression contains an unneeded negation.Comparison to %s should be %s singleton-comparison C0121 Used when an expression is compared to singleton values like True, False or
  None.Comparison should be %s misplaced-comparison-constant C0122 Used when the constant is placed on the left side of a comparison. It is
  usually clearer in intent to place it in the right hand side of the
  comparison.Using type() instead of isinstance() for a typecheck. unidiomatic-typecheck C0123 The idiomatic way to perform an explicit typecheck in Python is to use
  isinstance(x, Y) rather than type(x) == Y, type(x) is Y. Though there are
  unusual situations where these give different results.Consider using enumerate instead of iterating with range and len consider-using-enumerate C0200 Emitted when code that iterates with range and len is encountered. Such code
  can be simplified by using the enumerate builtin.Consider iterating the dictionary directly instead of calling .keys() consider-iterating-dictionary C0201 Emitted when the keys of a dictionary are iterated through the .keys() method.
  It is enough to just iterate through the dictionary itself, as in "for key in
  dictionary".Class method %s should have %s as first argument bad-classmethod-argument C0202 Used when a class method has a first argument named differently than the value
  specified in valid-classmethod-first-arg option (default to "cls"),
  recommended to easily differentiate them from regular instance methods.Metaclass method %s should have %s as first argument bad-mcs-method-argument C0203 Used when a metaclass method has a first argument named differently than the
  value specified in valid-classmethod-first-arg option (default to "cls"),
  recommended to easily differentiate them from regular instance methods.Metaclass class method %s should have %s as first argument bad-mcs-classmethod-argument C0204 Used when a metaclass class method has a first argument named differently than
  the value specified in valid-metaclass-classmethod-first-arg option (default
  to "mcs"), recommended to easily differentiate them from regular instance
  methods.Class __slots__ should be a non-string iterable single-string-used-for-slots C0205 Used when a class __slots__ is a simple string, rather than an iterable.Line too long (%s/%s) line-too-long C0301 Used when a line is longer than a given number of characters.Too many lines in module (%s/%s) too-many-lines C0302 Used when a module has too much lines, reducing its readability.Trailing whitespace trailing-whitespace C0303 Used when there is whitespace between the end of a line and the newline.Final newline missing missing-final-newline C0304 Used when the last line in a file is missing a newline.Trailing newlines trailing-newlines C0305 Used when there are trailing blank lines in a file.More than one statement on a single line multiple-statements C0321 Used when more than on statement are found on the same line.Unnecessary parens after %r keyword superfluous-parens C0325 Used when a single item in parentheses follows an if, for, or other keyword.%s space %s %s %s bad-whitespace C0326 Used when a wrong number of spaces is used around an operator, bracket or
  block opener.Mixed line endings LF and CRLF mixed-line-endings C0327 Used when there are mixed (LF and CRLF) newline signs in a file.Unexpected line ending format. There is '%s' while it should be '%s'. unexpected-line-ending-format C0328 Used when there is different newline than expected.Wrong %s indentation%s%s. bad-continuation C0330 TODOWrong spelling of a word '%s' in a comment: wrong-spelling-in-comment C0401 Used when a word in comment is not spelled correctly.Wrong spelling of a word '%s' in a docstring: wrong-spelling-in-docstring C0402 Used when a word in docstring is not spelled correctly.Invalid characters %r in a docstring invalid-characters-in-docstring C0403 Used when a word in docstring cannot be checked by enchant.Multiple imports on one line (%s) multiple-imports C0410 Used when import statement importing multiple modules is detected.%s should be placed before %s wrong-import-order C0411 Used when PEP8 import order is not respected (standard imports first, then
  third-party libraries, then local imports)Imports from package %s are not grouped ungrouped-imports C0412 Used when imports are not grouped by packagesImport "%s" should be placed at the top of the module wrong-import-position C0413 Used when code and imports are mixedOld-style class defined. old-style-class C1001 Used when a class is defined that does not inherit from another class and does
  not inherit explicitly from "object". This message can't be emitted when using
  Python >= 3.0.Do not use `len(SEQUENCE)` as condition value len-as-condition C1801 Used when Pylint detects incorrect use of len(sequence) inside conditions.Unrecognized file option %r unrecognized-inline-option E0011 Used when an unknown inline option is encountered.Bad option value %r bad-option-value E0012 Used when a bad value for an inline option is encountered.__init__ method is a generator init-is-generator E0100 Used when the special class method __init__ is turned into a generator by a
  yield in its body.Explicit return in __init__ return-in-init E0101 Used when the special class method __init__ has an explicit return value.%s already defined line %s function-redefined E0102 Used when a function / class / method is redefined.%r not properly in loop not-in-loop E0103 Used when break or continue keywords are used outside a loop.Return outside function return-outside-function E0104 Used when a "return" statement is found outside a function or method.Yield outside function yield-outside-function E0105 Used when a "yield" statement is found outside a function or method.Return with argument inside generator return-arg-in-generator E0106 Used when a "return" statement with an argument is found outside in a
  generator function or method (e.g. with some "yield" statements). This message
  can't be emitted when using Python >= 3.3.Use of the non-existent %s operator nonexistent-operator E0107 Used when you attempt to use the C-style pre-increment orpre-decrement
  operator -- and ++, which doesn't exist in Python.Duplicate argument name %s in function definition duplicate-argument-name E0108 Duplicate argument names in function definitions are syntax errors.Abstract class %r with abstract methods instantiated abstract-class-instantiated E0110 Used when an abstract class with `abc.ABCMeta` as metaclass has abstract
  methods and is instantiated.The first reversed() argument is not a sequence bad-reversed-sequence E0111 Used when the first argument to reversed() builtin isn't a sequence (does not
  implement __reversed__, nor __getitem__ and __len__'continue' not supported inside 'finally' clause continue-in-finally E0116 Emitted when the `continue` keyword is found inside a finally clause, which is
  a SyntaxError.An attribute defined in %s line %s hides this method method-hidden E0202 Used when a class defines a method which is hidden by an instance attribute
  from an ancestor class or set by some client code.Access to member %r before its definition line %s access-member-before-definition E0203 Used when an instance member is accessed before it's actually assigned.Method has no argument no-method-argument E0211 Used when a method which should have the bound instance as first argument has
  no argument defined.Method should have "self" as first argument no-self-argument E0213 Used when a method has an attribute different the "self" as first argument.
  This is considered as an error since this is a so common convention that you
  shouldn't break it!Invalid object %r in __slots__, must contain only non empty strings invalid-slots-object E0236 Used when an invalid (non-string) object occurs in __slots__.Assigning to attribute %r not defined in class slots assigning-non-slot E0237 Used when assigning to an attribute not defined in the class slots.Invalid __slots__ object invalid-slots E0238 Used when an invalid __slots__ is found in class. Only a string, an iterable
  or a sequence is permitted.Inheriting %r, which is not a class. inherit-non-class E0239 Used when a class inherits from something which is not a class.Inconsistent method resolution order for class %r inconsistent-mro E0240 Used when a class has an inconsistent method resolution order.Duplicate bases for class %r duplicate-bases E0241 Used when a class has duplicate bases.__iter__ returns non-iterator non-iterator-returned E0301 Used when an __iter__ method returns something which is not an iterable (i.e.
  has no `next` method)The special method %r expects %s param(s), %d %s given unexpected-special-method-signature E0302 Emitted when a special method was defined with an invalid number of
  parameters. If it has too few or too many, it might not work at all.__len__ does not return non-negative integer invalid-length-returned E0303 Used when an __len__ method returns something which is not a non-negative
  integerUnable to import %s import-error E0401 Used when pylint has been unable to import a module.Attempted relative import beyond top-level package relative-beyond-top-level E0402 Used when a relative import tries to access too many levels in the current
  package.Using variable %r before assignment used-before-assignment E0601 Used when a local variable is accessed before it's assignment.Undefined variable %r undefined-variable E0602 Used when an undefined variable is accessed.Undefined variable name %r in __all__ undefined-all-variable E0603 Used when an undefined variable name is referenced in __all__.Invalid object %r in __all__, must contain only strings invalid-all-object E0604 Used when an invalid (non-string) object occurs in __all__.No name %r in module %r no-name-in-module E0611 Used when a name cannot be found in a module.Possible unbalanced tuple unpacking with sequence%s: left side has %d label(s), right side has %d value(s) unbalanced-tuple-unpacking E0632 Used when there is an unbalanced tuple unpacking in assignmentAttempting to unpack a non-sequence%s unpacking-non-sequence E0633 Used when something which is not a sequence is used in an unpack assignmentBad except clauses order (%s) bad-except-order E0701 Used when except clauses are not in the correct order (from the more specific
  to the more generic). If you don't fix the order, some exceptions may not be
  caught by the most specific handler.Raising %s while only classes or instances are allowed raising-bad-type E0702 Used when something which is neither a class, an instance or a string is
  raised (i.e. a `TypeError` will be raised).The raise statement is not inside an except clause misplaced-bare-raise E0704 Used when a bare raise is not used inside an except clause. This generates an
  error, since there are no active exceptions to be reraised. An exception to
  this rule is represented by a bare raise inside a finally clause, which might
  work, as long as an exception is raised inside the try block, but it is
  nevertheless a code smell that must not be relied upon.Raising a new style class which doesn't inherit from BaseException raising-non-exception E0710 Used when a new style class which doesn't inherit from BaseException is
  raised.NotImplemented raised - should raise NotImplementedError notimplemented-raised E0711 Used when NotImplemented is raised instead of NotImplementedErrorCatching an exception which doesn't inherit from Exception: %s catching-non-exception E0712 Used when a class which doesn't inherit from Exception is used as an exception
  in an except clause.Use of __slots__ on an old style class slots-on-old-class E1001 Used when an old style class uses the __slots__ attribute. This message can't
  be emitted when using Python >= 3.0.Use of super on an old style class super-on-old-class E1002 Used when an old style class uses the super builtin. This message can't be
  emitted when using Python >= 3.0.Bad first argument %r given to super() bad-super-call E1003 Used when another argument than the current class is given as first argument
  of the super builtin.Missing argument to super() missing-super-argument E1004 Used when the super builtin didn't receive an argument. This message can't be
  emitted when using Python >= 3.0.%s %r has no %r member%s no-member E1101 Used when a variable is accessed for an unexistent member.%s is not callable not-callable E1102 Used when an object being called has been inferred to a non callable objectAssigning to function call which doesn't return assignment-from-no-return E1111 Used when an assignment is done on a function call but the inferred function
  doesn't return anything.No value for argument %s in %s call no-value-for-parameter E1120 Used when a function call passes too few arguments.Too many positional arguments for %s call too-many-function-args E1121 Used when a function call passes too many positional arguments.Unexpected keyword argument %r in %s call unexpected-keyword-arg E1123 Used when a function call passes a keyword argument that doesn't correspond to
  one of the function's parameter names.Argument %r passed by position and keyword in %s call redundant-keyword-arg E1124 Used when a function call would result in assigning multiple values to a
  function parameter, one value from a positional argument and one from a
  keyword argument.Sequence index is not an int, slice, or instance with __index__ invalid-sequence-index E1126 Used when a sequence type is indexed with an invalid type. Valid types are
  ints, slices, and objects with an __index__ method.Slice index is not an int, None, or instance with __index__ invalid-slice-index E1127 Used when a slice index is not an integer, None, or an object with an
  __index__ method.Assigning to function call which only returns None assignment-from-none E1128 Used when an assignment is done on a function call but the inferred function
  returns nothing but None.Context manager '%s' doesn't implement __enter__ and __exit__. not-context-manager E1129 Used when an instance in a with statement doesn't implement the context
  manager protocol(__enter__/__exit__).Got multiple values for keyword argument %r in function call repeated-keyword E1132 Emitted when a function call got multiple values for a keyword.Non-iterable value %s is used in an iterating context not-an-iterable E1133 Used when a non-iterable value is used in place where iterable is expectedNon-mapping value %s is used in a mapping context not-a-mapping E1134 Used when a non-mapping value is used in place where mapping is expectedValue '%s' doesn't support membership test unsupported-membership-test E1135 Emitted when an instance in membership test expression doesn't implement
  membership protocol (__contains__/__iter__/__getitem__)Value '%s' is unsubscriptable unsubscriptable-object E1136 Emitted when a subscripted value doesn't support subscription(i.e. doesn't
  define __getitem__ method)%r does not support item assignment unsupported-assignment-operation E1137 Emitted when an object does not support item assignment (i.e. doesn't define
  __setitem__ method)%r does not support item deletion unsupported-delete-operation E1138 Emitted when an object does not support item deletion (i.e. doesn't define
  __delitem__ method)Invalid metaclass %r used invalid-metaclass E1139 Emitted whenever we can detect that a class is using, as a metaclass,
  something which might be invalid for using as a metaclass.Unsupported logging format character %r (%#02x) at index %d logging-unsupported-format E1200 Used when an unsupported format character is used in a logging statement
  format string.Logging format string ends in middle of conversion specifier logging-format-truncated E1201 Used when a logging statement format string terminates before the end of a
  conversion specifier.Too many arguments for logging format string logging-too-many-args E1205 Used when a logging format string is given too many arguments.Not enough arguments for logging format string logging-too-few-args E1206 Used when a logging format string is given too few arguments.Unsupported format character %r (%#02x) at index %d bad-format-character E1300 Used when a unsupported format character is used in a format string.Format string ends in middle of conversion specifier truncated-format-string E1301 Used when a format string terminates before the end of a conversion specifier.Mixing named and unnamed conversion specifiers in format string mixed-format-string E1302 Used when a format string contains both named (e.g. '%(foo)d') and unnamed
  (e.g. '%d') conversion specifiers. This is also used when a named conversion
  specifier contains * for the minimum field width and/or precision.Expected mapping for format string, not %s format-needs-mapping E1303 Used when a format string that uses named conversion specifiers is used with
  an argument that is not a mapping.Missing key %r in format string dictionary missing-format-string-key E1304 Used when a format string that uses named conversion specifiers is used with a
  dictionary that doesn't contain all the keys required by the format string.Too many arguments for format string too-many-format-args E1305 Used when a format string that uses unnamed conversion specifiers is given too
  many arguments.Not enough arguments for format string too-few-format-args E1306 Used when a format string that uses unnamed conversion specifiers is given too
  few argumentsSuspicious argument in %s.%s call bad-str-strip-call E1310 The argument to a str.{l,r,}strip call contains a duplicate character,print statement used print-statement E1601 Used when a print statement is used (`print` is a function in Python 3) This
  message can't be emitted when using Python >= 3.0.Parameter unpacking specified parameter-unpacking E1602 Used when parameter unpacking is specified for a function(Python 3 doesn't
  allow it) This message can't be emitted when using Python >= 3.0.Implicit unpacking of exceptions is not supported in Python 3 unpacking-in-except E1603 Python3 will not allow implicit unpacking of exceptions in except clauses. See
  http://www.python.org/dev/peps/pep-3110/ This message can't be emitted when
  using Python >= 3.0.Use raise ErrorClass(args) instead of raise ErrorClass, args. old-raise-syntax E1604 Used when the alternate raise syntax 'raise foo, bar' is used instead of
  'raise foo(bar)'. This message can't be emitted when using Python >= 3.0.Use of the `` operator backtick E1605 Used when the deprecated "``" (backtick) operator is used instead of the str()
  function. This message can't be emitted when using Python >= 3.0.Use of long suffix long-suffix E1606 Used when "l" or "L" is used to mark a long integer. This will not work in
  Python 3, since `int` and `long` types have merged. This message can't be
  emitted when using Python >= 3.0.Use of the <> operator old-ne-operator E1607 Used when the deprecated "<>" operator is used instead of "!=". This is
  removed in Python 3. This message can't be emitted when using Python >= 3.0.Use of old octal literal old-octal-literal E1608 Used when encountering the old octal syntax, removed in Python 3. To use the
  new syntax, prepend 0o on the number. This message can't be emitted when using
  Python >= 3.0.Import  import-star-module-level E1609 only allowed at module level*
  Used when the import star syntax is used somewhere else than the module level.
  This message can't be emitted when using Python >= 3.0.%s: %s astroid-error F0002 Used when an unexpected error occurred while building the Astroid
  representation. This is usually accompanied by a traceback. Please report such
  errors !error while code parsing: %s parse-error F0010 Used when an exception occurred while building the Astroid representation
  which could be handled by astroid.Unable to check methods signature (%s / %s) method-check-failed F0202 Used when Pylint has been unable to check methods signature compatibility for
  an unexpected reason. Please report this kind if you don't make sense of it.Unable to run raw checkers on built-in module %s raw-checker-failed I0001 Used to inform that a built-in module has not been checked using the raw
  checkers.Unable to consider inline option %r bad-inline-option I0010 Used when an inline option is either badly formatted or can't be used inside
  modules.Locally disabling %s (%s) locally-disabled I0011 Used when an inline option disables a message or a messages category.Locally enabling %s (%s) locally-enabled I0012 Used when an inline option enables a message or a messages category.Ignoring entire file file-ignored I0013 Used to inform that the file will not be checkedSuppressed %s (from line %d) suppressed-message I0020 A message was triggered on a line, but suppressed explicitly by a disable=
  comment in the file. This message is not generated for messages that are
  ignored due to configuration settings.Useless suppression of %s useless-suppression I0021 Reported when a message is explicitly disabled for a line or a block of code,
  but never triggered.Pragma "%s" is deprecated, use "%s" instead deprecated-pragma I0022 Some inline pylint options have been renamed or reworked, only the most recent
  form should be used. NOTE:skip-all is only available with pylint >= 0.26Comparison to literal literal-comparison R0123 Used when comparing an object to a literal, which is usually what you do not
  want to do, since you can compare to a different literal than what was
  expected altogether.Method could be a function no-self-use R0201 Used when a method doesn't use its bound instance, and so could be written as
  a function.Consider using a decorator instead of calling classmethod no-classmethod-decorator R0202 Used when a class method is defined without using the decorator syntax.Consider using a decorator instead of calling staticmethod no-staticmethod-decorator R0203 Used when a static method is defined without using the decorator syntax.Cyclic import (%s) cyclic-import R0401 Used when a cyclic import between two or more modules is detected.Similar lines in %s files duplicate-code R0801 Indicates that a set of similar lines has been detected among multiple file.
  This usually means that the code should be refactored to avoid this
  duplication.Too many ancestors (%s/%s) too-many-ancestors R0901 Used when class has too many parent classes, try to reduce this to get a
  simpler (and so easier to use) class.Too many instance attributes (%s/%s) too-many-instance-attributes R0902 Used when class has too many instance attributes, try to reduce this to get a
  simpler (and so easier to use) class.Too few public methods (%s/%s) too-few-public-methods R0903 Used when class has too few public methods, so be sure it's really worth it.Too many public methods (%s/%s) too-many-public-methods R0904 Used when class has too many public methods, try to reduce this to get a
  simpler (and so easier to use) class.Too many return statements (%s/%s) too-many-return-statements R0911 Used when a function or method has too many return statement, making it hard
  to follow.Too many branches (%s/%s) too-many-branches R0912 Used when a function or method has too many branches, making it hard to
  follow.Too many arguments (%s/%s) too-many-arguments R0913 Used when a function or method takes too many arguments.Too many local variables (%s/%s) too-many-locals R0914 Used when a function or method has too many local variables.Too many statements (%s/%s) too-many-statements R0915 Used when a function or method has too many statements. You should then split
  it in smaller functions / methods.Too many boolean expressions in if statement (%s/%s) too-many-boolean-expressions R0916 Used when a if statement contains too many boolean expressionsConsider merging these isinstance calls to isinstance(%s, (%s)) consider-merging-isinstance R1701 Used when multiple consecutive isinstance calls can be merged into one.Too many nested blocks (%s/%s) too-many-nested-blocks R1702 Used when a function or a method has too many nested blocks. This makes the
  code less understandable and maintainable.The if statement can be replaced with %s simplifiable-if-statement R1703 Used when an if statement can be replaced with 'bool(test)'.Redefining argument with the local name %r redefined-argument-from-local R1704 Used when a local name is redefining an argument, which might suggest a
  potential error. This is taken in account only for a handful of name binding
  operations, such as for iteration, with statement assignment and exception
  handler assignment.Unnecessary "else" after "return" no-else-return R1705 Used in order to highlight an unnecessary block of code following an if
  containing a return statement. As such, it will warn when it encounters an
  else following a chain of ifs, all of them containing a return statement.Consider using ternary (%s if %s else %s) consider-using-ternary R1706 Used when one of known pre-python 2.5 ternary syntax is used.Unreachable code unreachable W0101 Used when there is some code behind a "return" or "raise" statement, which
  will never be accessed.Dangerous default value %s as argument dangerous-default-value W0102 Used when a mutable value as list or dictionary is detected in a default value
  for an argument.Statement seems to have no effect pointless-statement W0104 Used when a statement doesn't have (or at least seems to) any effect.String statement has no effect pointless-string-statement W0105 Used when a string is used as a statement (which of course has no effect).
  This is a particular case of W0104 with its own message so you can easily
  disable it if you're using those strings as documentation, instead of
  comments.Expression "%s" is assigned to nothing expression-not-assigned W0106 Used when an expression that is not a function call is assigned to nothing.
  Probably something else was intended.Unnecessary pass statement unnecessary-pass W0107 Used when a "pass" statement that can be avoided is encountered.Lambda may not be necessary unnecessary-lambda W0108 Used when the body of a lambda expression is a function call on the same
  argument list as the lambda itself; such lambda expressions are in all but a
  few cases replaceable with the function being called in the body of the
  lambda.Duplicate key %r in dictionary duplicate-key W0109 Used when a dictionary expression binds the same key multiple times.map/filter on lambda could be replaced by comprehension deprecated-lambda W0110 Used when a lambda is the first argument to "map" or "filter". It could be
  clearer as a list comprehension or generator expression. This message can't be
  emitted when using Python >= 3.0.Name %s will become a keyword in Python %s assign-to-new-keyword W0111 Used when assignment will become invalid in future Python release due to
  introducing new keywordElse clause on loop without a break statement useless-else-on-loop W0120 Loops should only have an else clause if they can exit early with a break
  statement, otherwise the statements under else should be on the same scope as
  the loop itself.Use of exec exec-used W0122 Used when you use the "exec" statement (function for Python 3), to discourage
  its usage. That doesn't mean you cannot use it !Use of eval eval-used W0123 Used when you use the "eval" function, to discourage its usage. Consider using
  `ast.literal_eval` for safely evaluating strings containing Python expressions
  from untrusted sources.Following "as" with another context manager looks like a tuple. confusing-with-statement W0124 Emitted when a `with` statement component returns multiple values and uses
  name binding with `as` only for a part of those values, as in with ctx() as a,
  b. This can be misleading, since it's not clear if the context manager returns
  a tuple or if the node without a name binding is another context manager.Using a conditional statement with a constant value using-constant-test W0125 Emitted when a conditional statement (If or ternary if) uses a constant value
  for its test. This might not be what the user intended to do.%s statement in finally block may swallow exception lost-exception W0150 Used when a break or a return statement is found inside the finally clause of
  a try...finally block: the exceptions raised in the try clause will be
  silently swallowed instead of being re-raised.Assert called on a 2-uple. Did you mean 'assert x,y'? assert-on-tuple W0199 A call of assert on a tuple will always evaluate to true if the tuple is not
  empty, and will always evaluate to false if it is.Attribute %r defined outside __init__ attribute-defined-outside-init W0201 Used when an instance attribute is defined outside the __init__ method.Static method with %r as first argument bad-staticmethod-argument W0211 Used when a static method has "self" or a value specified in valid-
  classmethod-first-arg option or valid-metaclass-classmethod-first-arg option
  as first argument.Access to a protected member %s of a client class protected-access W0212 Used when a protected member (i.e. class member with a name beginning with an
  underscore) is access outside the class or a descendant of the class where
  it's defined.Parameters differ from %s %r method arguments-differ W0221 Used when a method has a different number of arguments than in the implemented
  interface or in an overridden method.Signature differs from %s %r method signature-differs W0222 Used when a method signature is different than in the implemented interface or
  in an overridden method.Method %r is abstract in class %r but is not overridden abstract-method W0223 Used when an abstract method (i.e. raise NotImplementedError) is not
  overridden in concrete class.__init__ method from base class %r is not called super-init-not-called W0231 Used when an ancestor class method has an __init__ method which is not called
  by a derived class.Class has no __init__ method no-init W0232 Used when a class has no __init__ method, neither its parent classes.__init__ method from a non direct base class %r is called non-parent-init-called W0233 Used when an __init__ method is called on a class which is not in the direct
  ancestors for the analysed class.Useless super delegation in method %r useless-super-delegation W0235 Used whenever we can detect that an overridden method is useless, relying on
  super() delegation to do the same thing as another method from the MRO.Unnecessary semicolon unnecessary-semicolon W0301 Used when a statement is ended by a semi-colon (";"), which isn't necessary
  (that's python, not C ;).Bad indentation. Found %s %s, expected %s bad-indentation W0311 Used when an unexpected number of indentation's tabulations or spaces has been
  found.Found indentation with %ss instead of %ss mixed-indentation W0312 Used when there are some mixed tabs and spaces in a module.Use of "l" as long integer identifier lowercase-l-suffix W0332 Used when a lower case "l" is used to mark a long integer. You should use a
  upper case "L" since the letter "l" looks too much like the digit "1" This
  message can't be emitted when using Python >= 3.0.Wildcard import %s wildcard-import W0401 Used when `from module import *` is detected.Uses of a deprecated module %r deprecated-module W0402 Used a module marked as deprecated is imported.Relative import %r, should be %r relative-import W0403 Used when an import relative to the package directory is detected. This
  message can't be emitted when using Python >= 3.0.Reimport %r (imported line %s) reimported W0404 Used when a module is reimported multiple times.Module import itself import-self W0406 Used when a module is importing itself.__future__ import is not the first non docstring statement misplaced-future W0410 Python 2.5 and greater require __future__ import to be the first non docstring
  statement in the module.Cannot decode using encoding "%s", unexpected byte at position %d invalid-encoded-data W0512 Used when a source line cannot be decoded using the specified source file
  encoding. This message can't be emitted when using Python >= 3.0.Global variable %r undefined at the module level global-variable-undefined W0601 Used when a variable is defined through the "global" statement but the
  variable is not defined in the module scope.Using global for %r but no assignment is done global-variable-not-assigned W0602 Used when a variable is defined through the "global" statement but no
  assignment to this variable is done.Using the global statement global-statement W0603 Used when you use the "global" statement to update a global variable. Pylint
  just try to discourage this usage. That doesn't mean you cannot use it !Using the global statement at the module level global-at-module-level W0604 Used when you use the "global" statement at the module level since it has no
  effectUnused %s unused-import W0611 Used when an imported module or variable is not used.Unused variable %r unused-variable W0612 Used when a variable is defined but not used.Unused argument %r unused-argument W0613 Used when a function or method argument is not used.Unused import %s from wildcard import unused-wildcard-import W0614 Used when an imported module or variable is not used from a `'from X import
  *'` style import.Redefining name %r from outer scope (line %s) redefined-outer-name W0621 Used when a variable's name hide a name defined in the outer scope.Redefining built-in %r redefined-builtin W0622 Used when a variable or function override a built-in.Redefining name %r from %s in exception handler redefine-in-handler W0623 Used when an exception handler assigns the exception to an existing nameUsing possibly undefined loop variable %r undefined-loop-variable W0631 Used when an loop variable (i.e. defined by a for loop or a list comprehension
  or a generator expression) is used outside the loop.Cell variable %s defined in loop cell-var-from-loop W0640 A variable used in a closure is defined in a loop. This will result in all
  closures using the same value for the closed-over variable.No exception type(s) specified bare-except W0702 Used when an except clause doesn't specify exceptions type to catch.Catching too general exception %s broad-except W0703 Used when an except catches a too general exception, possibly burying
  unrelated errors.Catching previously caught exception type %s duplicate-except W0705 Used when an except catches a type that was already caught by a previous
  handler.Exception doesn't inherit from standard "Exception" class nonstandard-exception W0710 Used when a custom exception class is raised but doesn't inherit from the
  builtin "Exception" class. This message can't be emitted when using Python >=
  3.0.Exception to catch is the result of a binary "%s" operation binary-op-exception W0711 Used when the exception to catch is of the form "except A or B:". If intending
  to catch multiple, rewrite as "except (A, B):"Use of "property" on an old style class property-on-old-class W1001 Used when Pylint detect the use of the builtin "property" on an old style
  class while this is relying on new style classes features. This message can't
  be emitted when using Python >= 3.0.Specify string format arguments as logging function parameters logging-not-lazy W1201 Used when a logging statement has a call form of "logging.<logging
  method>(format_string % (format_args...))". Such calls should leave string
  interpolation to the logging method itself and be written "logging.<logging
  method>(format_string, format_args...)" so that the program may avoid
  incurring the cost of the interpolation in those cases in which no message
  will be logged. For more, see http://www.python.org/dev/peps/pep-0282/.Use % formatting in logging functions and pass the % parameters as arguments logging-format-interpolation W1202 Used when a logging statement has a call form of "logging.<logging
  method>(format_string.format(format_args...))". Such calls should use %
  formatting instead, but leave interpolation to the logging function by passing
  the parameters as arguments.Format string dictionary key should be a string, not %s bad-format-string-key W1300 Used when a format string that uses named conversion specifiers is used with a
  dictionary whose keys are not all strings.Unused key %r in format string dictionary unused-format-string-key W1301 Used when a format string that uses named conversion specifiers is used with a
  dictionary that contains keys not required by the format string.Invalid format string bad-format-string W1302 Used when a PEP 3101 format string is invalid. This message can't be emitted
  when using Python < 2.7.Missing keyword argument %r for format string missing-format-argument-key W1303 Used when a PEP 3101 format string that uses named fields doesn't receive one
  or more required keywords. This message can't be emitted when using Python <
  2.7.Unused format argument %r unused-format-string-argument W1304 Used when a PEP 3101 format string that uses named fields is used with an
  argument that is not required by the format string. This message can't be
  emitted when using Python < 2.7.Format string contains both automatic field numbering and manual field specification format-combined-specification W1305 Used when a PEP 3101 format string contains both automatic field numbering
  (e.g. '{}') and manual field specification (e.g. '{0}'). This message can't be
  emitted when using Python < 2.7.Missing format attribute %r in format specifier %r missing-format-attribute W1306 Used when a PEP 3101 format string uses an attribute specifier ({0.length}),
  but the argument passed for formatting doesn't have that attribute. This
  message can't be emitted when using Python < 2.7.Using invalid lookup key %r in format specifier %r invalid-format-index W1307 Used when a PEP 3101 format string uses a lookup specifier ({a[1]}), but the
  argument passed for formatting doesn't contain or doesn't have that key as an
  attribute. This message can't be emitted when using Python < 2.7.Anomalous backslash in string: '%s'. String constant might be missing an r prefix. anomalous-backslash-in-string W1401 Used when a backslash is in a literal string but not as an escape.Anomalous Unicode escape in byte string: '%s'. String constant might be missing an r or u prefix. anomalous-unicode-escape-in-string W1402 Used when an escape like \u is encountered in a byte string where it has no
  effect."%s" is not a valid mode for open. bad-open-mode W1501 Python supports: r, w, a[, x] modes with b, +, and U (only with r) options.
  See http://docs.python.org/2/library/functions.html#openUsing datetime.time in a boolean context. boolean-datetime W1502 Using datetime.time in a boolean context can hide subtle bugs when the time
  they represent matches midnight UTC. This behaviour was fixed in Python 3.5.
  See http://bugs.python.org/issue13936 for reference. This message can't be
  emitted when using Python >= 3.5.Redundant use of %s with constant value %r redundant-unittest-assert W1503 The first argument of assertTrue and assertFalse is a condition. If a constant
  is passed as parameter, that condition will be always true. In this case a
  warning should be emitted.Using deprecated method %s() deprecated-method W1505 The method is marked as deprecated and will be removed in a future version of
  Python. Consider looking for an alternative in the documentation.apply built-in referenced apply-builtin W1601 Used when the apply built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.basestring built-in referenced basestring-builtin W1602 Used when the basestring built-in function is referenced (missing from Python
  3) This message can't be emitted when using Python >= 3.0.buffer built-in referenced buffer-builtin W1603 Used when the buffer built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.cmp built-in referenced cmp-builtin W1604 Used when the cmp built-in function is referenced (missing from Python 3) This
  message can't be emitted when using Python >= 3.0.coerce built-in referenced coerce-builtin W1605 Used when the coerce built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.execfile built-in referenced execfile-builtin W1606 Used when the execfile built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.file built-in referenced file-builtin W1607 Used when the file built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.long built-in referenced long-builtin W1608 Used when the long built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.raw_input built-in referenced raw_input-builtin W1609 Used when the raw_input built-in function is referenced (missing from Python
  3) This message can't be emitted when using Python >= 3.0.reduce built-in referenced reduce-builtin W1610 Used when the reduce built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.StandardError built-in referenced standarderror-builtin W1611 Used when the StandardError built-in function is referenced (missing from
  Python 3) This message can't be emitted when using Python >= 3.0.unicode built-in referenced unicode-builtin W1612 Used when the unicode built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.xrange built-in referenced xrange-builtin W1613 Used when the xrange built-in function is referenced (missing from Python 3)
  This message can't be emitted when using Python >= 3.0.__coerce__ method defined coerce-method W1614 Used when a __coerce__ method is defined (method is not used by Python 3) This
  message can't be emitted when using Python >= 3.0.__delslice__ method defined delslice-method W1615 Used when a __delslice__ method is defined (method is not used by Python 3)
  This message can't be emitted when using Python >= 3.0.__getslice__ method defined getslice-method W1616 Used when a __getslice__ method is defined (method is not used by Python 3)
  This message can't be emitted when using Python >= 3.0.__setslice__ method defined setslice-method W1617 Used when a __setslice__ method is defined (method is not used by Python 3)
  This message can't be emitted when using Python >= 3.0.import missing `from __future__ import absolute_import` no-absolute-import W1618 Used when an import is not accompanied by ``from __future__ import
  absolute_import`` (default behaviour in Python 3) This message can't be
  emitted when using Python >= 3.0.division w/o __future__ statement old-division W1619 Used for non-floor division w/o a float literal or ``from __future__ import
  division`` (Python 3 returns a float for int division unconditionally) This
  message can't be emitted when using Python >= 3.0.Called a next() method on an object next-method-called W1622 Used when an object's next() method is called (Python 3 uses the next() built-
  in function) This message can't be emitted when using Python >= 3.0.Assigning to a class's __metaclass__ attribute metaclass-assignment W1623 Used when a metaclass is specified by assigning to __metaclass__ (Python 3
  specifies the metaclass as a class statement argument) This message can't be
  emitted when using Python >= 3.0.Indexing exceptions will not work on Python 3 indexing-exception W1624 Indexing exceptions will not work on Python 3. Use `exception.args[index]`
  instead. This message can't be emitted when using Python >= 3.0.Raising a string exception raising-string W1625 Used when a string exception is raised. This will not work on Python 3. This
  message can't be emitted when using Python >= 3.0.reload built-in referenced reload-builtin W1626 Used when the reload built-in function is referenced (missing from Python 3).
  You can use instead imp.reload or importlib.reload. This message can't be
  emitted when using Python >= 3.0.__oct__ method defined oct-method W1627 Used when a __oct__ method is defined (method is not used by Python 3) This
  message can't be emitted when using Python >= 3.0.__hex__ method defined hex-method W1628 Used when a __hex__ method is defined (method is not used by Python 3) This
  message can't be emitted when using Python >= 3.0.__nonzero__ method defined nonzero-method W1629 Used when a __nonzero__ method is defined (method is not used by Python 3)
  This message can't be emitted when using Python >= 3.0.__cmp__ method defined cmp-method W1630 Used when a __cmp__ method is defined (method is not used by Python 3) This
  message can't be emitted when using Python >= 3.0.input built-in referenced input-builtin W1632 Used when the input built-in is referenced (backwards-incompatible semantics
  in Python 3) This message can't be emitted when using Python >= 3.0.round built-in referenced round-builtin W1633 Used when the round built-in is referenced (backwards-incompatible semantics
  in Python 3) This message can't be emitted when using Python >= 3.0.intern built-in referenced intern-builtin W1634 Used when the intern built-in is referenced (Moved to sys.intern in Python 3)
  This message can't be emitted when using Python >= 3.0.unichr built-in referenced unichr-builtin W1635 Used when the unichr built-in is referenced (Use chr in Python 3) This message
  can't be emitted when using Python >= 3.0.map built-in referenced when not iterating map-builtin-not-iterating W1636 Used when the map built-in is referenced in a non-iterating context (returns
  an iterator in Python 3) This message can't be emitted when using Python >=
  3.0.zip built-in referenced when not iterating zip-builtin-not-iterating W1637 Used when the zip built-in is referenced in a non-iterating context (returns
  an iterator in Python 3) This message can't be emitted when using Python >=
  3.0.range built-in referenced when not iterating range-builtin-not-iterating W1638 Used when the range built-in is referenced in a non-iterating context (returns
  an iterator in Python 3) This message can't be emitted when using Python >=
  3.0.filter built-in referenced when not iterating filter-builtin-not-iterating W1639 Used when the filter built-in is referenced in a non-iterating context
  (returns an iterator in Python 3) This message can't be emitted when using
  Python >= 3.0.Using the cmp argument for list.sort / sorted using-cmp-argument W1640 Using the cmp argument for list.sort or the sorted builtin should be avoided,
  since it was removed in Python 3. Using either `key` or `functools.cmp_to_key`
  should be preferred. This message can't be emitted when using Python >= 3.0.Implementing __eq__ without also implementing __hash__ eq-without-hash W1641 Used when a class implements __eq__ but not __hash__. In Python 2, objects get
  object.__hash__ as the default implementation, in Python 3 objects get None as
  their default __hash__ implementation if they also implement __eq__. This
  message can't be emitted when using Python >= 3.0.__div__ method defined div-method W1642 Used when a __div__ method is defined. Using `__truediv__` and setting__div__
  = __truediv__ should be preferred.(method is not used by Python 3) This
  message can't be emitted when using Python >= 3.0.__idiv__ method defined idiv-method W1643 Used when a __idiv__ method is defined. Using `__itruediv__` and
  setting__idiv__ = __itruediv__ should be preferred.(method is not used by
  Python 3) This message can't be emitted when using Python >= 3.0.__rdiv__ method defined rdiv-method W1644 Used when a __rdiv__ method is defined. Using `__rtruediv__` and
  setting__rdiv__ = __rtruediv__ should be preferred.(method is not used by
  Python 3) This message can't be emitted when using Python >= 3.0.Exception.message removed in Python 3 exception-message-attribute W1645 Used when the message attribute is accessed on an Exception. Use
  str(exception) instead. This message can't be emitted when using Python >=
  3.0.non-text encoding used in str.decode invalid-str-codec W1646 Used when using str.encode or str.decode with a non-text encoding. Use codecs
  module to handle arbitrary codecs. This message can't be emitted when using
  Python >= 3.0.sys.maxint removed in Python 3 sys-max-int W1647 Used when accessing sys.maxint. Use sys.maxsize instead. This message can't be
  emitted when using Python >= 3.0.Module moved in Python 3 bad-python3-import W1648 Used when importing a module that no longer exists in Python 3. This message
  can't be emitted when using Python >= 3.0.Accessing a function method on the string module deprecated-string-function W1649 Used when accessing a string function that has been deprecated in Python 3.
  This message can't be emitted when using Python >= 3.0.Using str.translate with deprecated deletechars parameters deprecated-str-translate-call W1650 Used when using the deprecated deletechars parameters from str.translate.
  Usere.sub to remove the desired characters This message can't be emitted when
  using Python >= 3.0.
